/*

An anonymous class is a class that does not have a name.

Anonymous classes offer the programmer a convenient way of encapsulating read-only properties into a single object without the need to explicitly define a type first.

The type name will be generated by the compiler.

var o1 = new { Name = "Tom", Age = 65 };

Once instantiated, you can access the fields in the object by using dot notation.

Console.WriteLine("Name: {0} Age: {1}", o1.Name, o1.Age};

You have the option to create other instances of the same anonymous class but with different values.

var o2 = new { Name = "Hal", Age = 46 };

The C# compiler will look at the names, types, number, and the order of the fields in the object in order to determine whether two instances of an anonymous class have the same type or not.

Both objects contain the same number of fields, the same name and the same type, in the same order.

This means that you can assign o1 to the o2 or vice versa.

o2 = o1;

There are quite a few restrictions on the contents of an anonymous class:
- Anonymous classes can contain only public fields.
- The fields must all be initialized.
- Fields cannot be static.
- You cannot define any methods for them.

*/
